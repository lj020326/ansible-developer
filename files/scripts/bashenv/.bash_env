
log_prefix_bashenv=".bash_env"

echo "${log_prefix_bashenv} setting environment vars"

#export ADD_GNUTOOLS_BASH_PATH=0

export NETWORK_INTERNAL_DOMAIN="johnson.int"

## ref: https://github.com/ansible/ansible/issues/33831
#export ANSIBLE_VAULT_PASSWORD_FILE=~/.vault_pass

export ANSIBLE_DEVELOPER_REPO="${HOME}/repos/ansible/ansible-developer"
export ANSIBLE_DATACENTER_REPO="${HOME}/repos/ansible/ansible-datacenter"
export ANSIBLE_INVENTORY_DIR="${ANSIBLE_DATACENTER_REPO}/inventory/PROD"

## if using public repo
#export DEVENV_INSTALL_REMOTE_SCRIPT="https://raw.githubusercontent.com/lj020326/ansible-developer/main/install.sh"
## if using internal repo
export DEVENV_INSTALL_REMOTE_SCRIPT="https://raw.githubusercontent.com/lj020326/ansible-developer/main/install-ansibledev-pvt.sh"

export CYBERARK_ACCOUNT_USERNAME="e-lee"

export LANG='en_US.utf-8'

export PYTHON2_HOME=/usr/bin
export PYTHON2_BIN_DIR=$PYTHON2_HOME

export PYTHON3_HOME=/usr/bin
export PYTHON3_BIN_DIR=$PYTHON3_HOME

## ref: https://www.jeffgeerling.com/blog/running-ansible-within-windows
#ANSIBLE=/opt/ansible
#export PATH=$PATH:$ANSIBLE/bin
#export PYTHONPATH=$ANSIBLE/lib
#export ANSIBLE_LIBRARY=$ANSIBLE/library

export DOCKER_REGISTRY_INTERNAL="media.${NETWORK_INTERNAL_DOMAIN}:5000"

#export MOLECULE_IMAGE_NAMESPACE="media.${NETWORK_INTERNAL_DOMAIN}:5000"
export MOLECULE_IMAGE_REGISTRY="media.${NETWORK_INTERNAL_DOMAIN}:5000"
export EDITOR=/usr/local/bin/emacs

export PYTHON_VERSION="3"
export TEST_PYTHON_VERSION="3.10"

SSH_KEY_GITHUB=~/.ssh/id_rsa

## ref: https://pythonspeed.com/articles/docker-buildkit/
#export DOCKER_BUILDKIT=1
export DOCKER_BUILDKIT=0

if [[ "${PLATFORM}" =~ ^(MSYS|MINGW64|MINGW32)$ ]]; then
    echo "${log_prefix_bashenv} setting env for MSYS/MINGW platform"

    ## ref: https://stackoverflow.com/questions/11936685/how-to-obtain-the-location-of-cacerts-of-the-default-java-installation
    export JAVA_HOME=$(/usr/libexec/java_home)

    export GIT_SSH=/usr/bin/ssh

#    export CMAKE_C_COMPILER=/c/apps/msys64/mingw64/bin/gcc
#    export CMAKE_CXX_COMPILER=/c/apps/msys64/mingw64/bin/g++
#    export CC=/c/apps/msys64/mingw64/bin/gcc
#    export CXX=/c/apps/msys64/mingw64/bin/g++
    export CMAKE_C_COMPILER=/usr/bin/gcc
    export CMAKE_CXX_COMPILER=/usr/bin/g++

	## always use /usr/bin unless explicitly overridden in shell
#	if [[ "${PLATFORM}" =~ ^(MINGW64)$ ]]; then
#		export CMAKE_C_COMPILER=/mingw64/bin/gcc
#		export CMAKE_CXX_COMPILER=/mingw64/bin/g++
#	fi
    export CC=${CMAKE_C_COMPILER}
    export CXX=${CMAKE_CXX_COMPILER}

    #export VSCOMMONTOOLS="/c/Program Files (x86)/Microsoft Visual C++ Build Tools"
    #export VSCOMMONTOOLS=`echo "/$VSCOMMONTOOLS" | sed -e 's/\\/\//g' -e 's/://'`
    export VSCOMMONTOOLS_MSYS=$(echo "/$VSCOMMONTOOLS" | sed -e 's/\\/\//g' -e 's/://')

    export WINDOWS_APPS_BINDIR=${HOME}/AppData/Local/Microsoft/WindowsApps

    export PYTHON2_HOME=/usr/bin
    export PYTHON2_BIN_DIR=$PYTHON2_HOME

    export PYTHON3_HOME=/usr/bin
    export PYTHON3_BIN_DIR=$PYTHON3_HOME

    export PYTHON2_HOME_WIN=/c/apps/winpython2.07
    export PYTHON2_BIN_DIR_WIN=${PYTHON2_HOME_WIN}/python-2.7.13.amd64
    export PYTHON2_SCRIPTDIR_WIN=${PYTHON2_HOME_WIN}/Scripts
    export PYTHON2_USER_SCRIPTDIR_WIN=${HOME}/AppData/Roaming/Python/Python27/Scripts

    export PYTHON3_HOME=/usr/bin
    export PYTHON3_BIN_DIR=$PYTHON3_HOME

    export PYTHON3_HOME_WIN=/c/apps/winpython3.10.2
    export PYTHON3_BIN_DIR_WIN=${PYTHON3_HOME_WIN}/python-3.10.2.amd64
    export PYTHON3_SCRIPTDIR_WIN=${PYTHON3_HOME_WIN}/Scripts
    export PYTHON3_USER_SCRIPTDIR_WIN=${HOME}/AppData/Roaming/Python/Python310/Scripts

    #export MSYS_HOME=/c/apps/msys64
    export MINGW_HOME=/mingw64

    ## install golang
    ## ref: https://stackoverflow.com/questions/37198369/use-go-lang-with-msys2
    export GOROOT=/mingw64/lib/go
    export GOPATH=/mingw64

#    #export JAVA_HOME=/c/apps/java/jre8
##    [[ -z $JAVA_HOME ]] && export JAVA_HOME=/c/apps/Java/jdk1.8.0_231
##    export JAVA_HOME=/c/apps/Java/jdk1.8.0_231
##    export JAVA_HOME=/c/apps/Java/jre1.6
#    export JAVA_HOME=/c/apps/Java/jre1.8.0_231
#    export M2_HOME=/c/apps/apache-maven-3.5.2
    export M2_HOME=/c/apps/apache-maven-3.6.3

    export JYTHON_HOME=/c/apps/jython/jython2.7.0
    export MONGODB=/c/apps/mongodb3.3.8

    export CHOCOLATEYINSTALL=/c/ProgramData/Chocolatey
    export SCOOP_HOME=${HOME}/scoop

    export VSCODE_BINDIR="${HOME}/AppData/Local/Programs/Microsoft VS Code/bin"

#    export EDITOR=/c/apps/notepad++/notepad++.exe
    export EDITOR=/usr/bin/emacs

    echo "${log_prefix_bashenv} setting PATH for MSYS/MINGW platform"
    ## set user path
#    export PATH=/usr/bin:/usr/local/bin
    export PATH=/usr/local/bin:/usr/bin
    if [[ "${PLATFORM}" =~ ^(MINGW64)$ ]]; then
      export PATH=/usr/local/bin:/mingw64/bin:/usr/bin
    fi

    export PATH+=:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl
    export PATH+=:/c/Windows/system32
    export PATH+=:$WINDOWS_APPS_BINDIR

    export PATH+=:/c/apps/bin
    # export PATH+=:"/c/apps/7-Zip"
    export PATH+=:"$VSCOMMONTOOLS_MSYS"
    #export PATH+=:/c/apps/nvm
    export PATH+=:"$DOCKER_HOME"
    export PATH+=:"$DOCKER_HOME/bin"

    ## java env
    export PATH+=:$JAVA_HOME/bin
    ## maven
    export PATH+=:$M2_HOME/bin

#    export PATH+=:$MONGODB/bin
#    export PATH+=:$JYTHON_HOME/bin

    ## Chocolatey
    export PATH+=:$CHOCOLATEYINSTALL/bin

    ## SCOOP
    ## ref: https://github.com/lukesampson/scoop/wiki
    export PATH+=:${SCOOP_HOME}/shims

    export PATH+=:$VAGRANT_HOME/bin
    export PATH+=:$GOLANG_HOME/bin
    export PATH+=:$GOLANG_LOCAL_HOME/bin

    export PATH+=:$POSH_HOME
    export PATH+=:$DIG_HOME/bin

    #export PATH+=:~/.minishift/cache/oc/v1.4.1
#    export PATH+=:$MINGW_HOME/bin
    export PATH+=":${VSCODE_BINDIR}"

    ## MINIKUBE
#    export PATH+=:/c/apps/Kubernetes/Minikube

elif [[ "${PLATFORM}" == *"DARWIN"* ]]; then
    echo "${log_prefix_bashenv} setting path for DARWIN env"

    ## ref: https://stackoverflow.com/questions/11936685/how-to-obtain-the-location-of-cacerts-of-the-default-java-installation
    ## ref: https://dev.to/rithvik78/change-the-default-java-version-on-macos-3jee
#    export JAVA_HOME=$(/usr/libexec/java_home)
    JAVA_VERSION_DEFAULT="1.8"
    export JAVA_HOME=$(/usr/libexec/java_home -v${JAVA_VERSION_DEFAULT})
    ## ref: https://stackoverflow.com/a/41371938/2791368
    export JAVA_TOOL_OPTIONS="-Djavax.net.ssl.trustStoreType=KeychainStore -Djavax.net.ssl.trustStore=/Library/Keychains/System.keychain"

    ## ref: https://apple.stackexchange.com/questions/371997/suppressing-the-default-interactive-shell-is-now-zsh-message-in-macos-catalina
    export BASH_SILENCE_DEPRECATION_WARNING=1
    export EDITOR=/usr/local/bin/emacs
    export VSCODE_SETTINGS_DIR="${HOME}/Library/Application\ Support/Code/User"

    ## set user path
# 	export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  	export PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

    ## ref: https://code.visualstudio.com/docs/setup/mac#_alternative-manual-instructions
    export PATH+=":/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

    ## Add Homebrew
    export HOMEBREW_PREFIX="/usr/local"

    ## ref: https://www.topbug.net/blog/2013/04/14/install-and-use-gnu-command-line-tools-in-mac-os-x/
    ## ref: https://apple.stackexchange.com/questions/69223/how-to-replace-mac-os-x-utilities-with-gnu-core-utilities#69332
    ## ref: https://formulae.brew.sh/formula/findutils
    export PATH="$(brew --prefix coreutils)/libexec/gnubin:${PATH}"
    export MANPATH+=":${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnuman"
#    export PATH="${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnubin:${PATH}"
#    export PATH="${HOMEBREW_PREFIX}/opt/findutils/libexec/gnubin:${PATH}"
#    export PATH="${HOMEBREW_PREFIX}/opt/grep/libexec/gnubin:${PATH}"

    ## ref: https://stackoverflow.com/questions/52509602/cant-compile-c-program-on-a-mac-after-upgrade-to-mojave
#    export CPATH=/Library/Developer/CommandLineTools/usr/include/c++/v1

    ## ref: https://emacsformacosx.com/tips
    ## ref: https://stackoverflow.com/questions/23148787/why-emacsclient-cant-find-socket-after-executing-emacs-daemon/26471957
#     export EMACS_SERVER_FILE="~/.emacs.d/server"
#    export EMACS_SERVER_FILE="/tmp/emacs1000"

    export PYTHON3_HOME=/usr/local/bin

    # enable programmable completion features (you don't need to enable
    # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
    # sources /etc/bash.bashrc).
    ## ref: https://www.buildahomelab.com/2022/04/26/how-to-install-ansible-with-pipenv-pyenv/
    if ! shopt -oq posix; then
      if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
      elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
      fi
    fi

    ## ref: https://devqa.io/brew-install-java/
    export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8)
    export JAVA_11_HOME=$(/usr/libexec/java_home -v11)
    export JAVA_17_HOME=$(/usr/libexec/java_home -v17)
    export JAVA_24_HOME=$(/usr/libexec/java_home -v24)

    ## ref: https://podman.io/docs/installation
    export PODMAN_HOME=/opt/podman
    export PODMAN_BINDIR="${PODMAN_HOME}/bin"

    export PATH+=":${PODMAN_BINDIR}"

    ## ref: https://docs.kics.io/latest/documentation/
    export KICS_QUERIES_PATH=/usr/local/opt/kics/share/kics/assets/queries

    ## ref: https://apple.stackexchange.com/questions/69223/how-to-replace-mac-os-x-utilities-with-gnu-core-utilities#69332
    # Reset/Empty the .bash_path file that holds GNU paths
    [[ -f "${HOME}/.bash_path" ]] && mv "${HOME}/.bash_path" "${HOME}/.bash_path.orig"

    # Build PATH variable script in "${HOME}/.bash_path"
#    for i in /usr/local/Cellar/*/*/bin; do
#      echo 'export PATH="'$i':$PATH"' >> "${HOME}/.bash_path"
#    done
    for i in /usr/local/Cellar/*/*/libexec/gnubin; do
      echo 'export PATH="'$i':$PATH"' >> "${HOME}/.bash_path"
    done
    for i in /usr/local/Cellar/*/*/share/man; do
      echo 'export MANPATH="'$i':$MANPATH"' >> "${HOME}/.bash_path"
    done
    for i in /usr/local/Cellar/*/*/libexec/gnuman; do
      echo 'export MANPATH="'$i':$MANPATH"' >> "${HOME}/.bash_path"
    done

    if [[ "${ADD_GNUTOOLS_BASH_PATH-1}" -eq 1 && -f "${HOME}/.bash_path" ]]; then
        echo "${log_bash} sourcing .bash_path"
        source "${HOME}/.bash_path"
    fi

else
    echo "${log_prefix_bashenv} setting environment vars for LINUX env"

    ## ref: https://stackoverflow.com/questions/11936685/how-to-obtain-the-location-of-cacerts-of-the-default-java-installation
    export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")

    if [[ $EUID -eq 0 ]]; then
        #export KUBECONFIG=/opt/openshift/openshift.int.config/master/admin.kubeconfig
        # sudo -H cp /etc/kubernetes/admin.conf $HOME/.kube/config
        # sudo -H cp ~/repos/pyutils/k8s/conf/admin.conf $HOME/.kube/config
        export KUBECONFIG=$HOME/.kube/config
    fi
#    if [ "${HOSTNAME}" == "openshift.${NETWORK_INTERNAL_DOMAIN}" ]; then
#        export OPENSHIFT_INSTALL=/opt/openshift
#        export CURL_CA_BUNDLE=/opt/openshift/openshift.int.config/master/ca.crt
#    fi

    export ANSIBLE_ROLES_PATH=/etc/ansible/roles:~/.ansible/roles

    export KOLLA_HOME=/data/Iaas/OpenStack

    export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    export PATH+=:$OPENSHIFT_INSTALL

    # setenv-python 3
fi

## using rvm
## ref: https://nrogap.medium.com/install-rvm-in-macos-step-by-step-d3b3c236953b
if [ -d "${HOME}/.rvm/scripts/rvm" ]; then
    export RVM_SCRIPTS_DIR="${HOME}/.rvm/scripts"
    echo "${log_prefix_bashenv} adding ${RVM_SCRIPTS_DIR} into PATH"
    export PATH="${RVM_SCRIPTS_DIR}:$PATH"
    source "${RVM_SCRIPTS_DIR}/rvm"
fi

unset PYENV_BIN_DIR
if [ -d "${HOME}/.pyenv/bin" ]; then
  export PYENV_BIN_DIR="${PYENV_ROOT}/bin"
  echo "${log_prefix_bashenv} set PYENV_BIN_DIR to ${PYENV_BIN_DIR}"
elif [ -d "${HOME}/.pyenv/pyenv-win/bin" ]; then
  export PYENV_BIN_DIR="${PYENV_ROOT}/bin"
  echo "${log_prefix_bashenv} set PYENV_BIN_DIR to ${PYENV_BIN_DIR}"
#elif [ -f "${HOME}/.pyenv/shims/python3" ]; then
#  export PYENV_BIN_DIR="${HOME}/.pyenv/shims"
#  echo "${log_prefix_bashenv} set PYENV_BIN_DIR to ${PYENV_BIN_DIR}"
fi
if [ -n "${PYENV_BIN_DIR}" ]; then
  echo "${log_prefix_bashenv} adding ${PYENV_BIN_DIR} into PATH"
  export PATH="${PYENV_BIN_DIR}:$PATH"
fi

## using pyenv
## ref: https://opensource.com/article/19/5/python-3-default-mac
## https://realpython.com/intro-to-pyenv/
if command -v pyenv 1>/dev/null 2>&1; then
  export PYENV_ROOT="$(pyenv root)"
  echo "${log_prefix_bashenv} source $(pyenv root)/shims into PATH"
  export PATH="$(pyenv root)/shims:$PATH"

  #    ## ref: https://stackoverflow.com/questions/58679742/set-default-python-with-pyenv
  #    eval "$(pyenv init -)"
  #    if command -v pyenv-virtualenv-init 1>/dev/null 2>&1; then
  #      ## https://stackoverflow.com/questions/62532807/pyenv-no-such-command-virtualenv
  #      ## brew install pyenv-virtualenv
  #      eval "$(pyenv virtualenv-init -)";
  #    fi

  ## ref: https://stackoverflow.com/questions/40684543/how-to-make-python-use-ca-certificates-from-mac-os-truststore
  CERT_PATH=$(python -m certifi)
  export SSL_CERT_FILE=${CERT_PATH}
  export SSL_CERT_DIR=$(dirname "${CERT_PATH}")
  export REQUESTS_CA_BUNDLE=${CERT_PATH}
fi

if [ -d "${HOME}/bin" ]; then
    export PATH="${HOME}/bin:${PATH}"
fi
if [ -d "${HOME}/.local/bin" ]; then
    export PATH="${HOME}/.local/bin:${PATH}"
fi

if ! command -v jenv 1>/dev/null 2>&1; then
  echo "${log_prefix_bashenv} adding jenv to PATH"
  if [ -d "${HOME}/.jenv/bin" ]; then
    export PATH="$HOME/.jenv/bin:$PATH"
  elif [ -d "${HOME}/.jenv/shims" ]; then
    export PATH="$HOME/.jenv/shims:$PATH"
  fi
fi

## ref: https://www.jenv.be/
if command -v jenv 1>/dev/null 2>&1; then
  echo "${log_prefix_bashenv} init jenv"
  eval "$(jenv init -)"
fi

if [ -z "${JAVA_HOME}" ] || [ ! -d "${JAVA_HOME}" ]; then
  ## ref: https://stackoverflow.com/questions/1117398/java-home-directory-in-linux
  export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
fi

export PATH=".:${PATH}"

#echo "${log_prefix_bashenv} PATH=${PATH}"

##############
### Ansible Galaxy env vars
###
###   'ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN' set from ~/.bash_secrets
###
### ref: https://docs.ansible.com/ansible/latest/collections_guide/collections_installing.html#configuring-the-ansible-galaxy-client
#export ANSIBLE_GALAXY_SERVER_LIST="staging_repo,published_repo,rh_certified,community_repo"
##export ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN="c2bcc7e30d4fcc1a1b18a3ae8b1744909d9a88ec"
#export ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN="b028ba142a0b76feb0123bac66e127cc7d0638a1"
#
###[galaxy_server.staging_repo]
#export ANSIBLE_GALAXY_SERVER_STAGING_REPO_URL="https://ansible-galaxy.${NETWORK_INTERNAL_DOMAIN}/api/galaxy/content/staging/"
#export ANSIBLE_GALAXY_SERVER_STAGING_REPO_TOKEN="${ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN}"
#export ANSIBLE_GALAXY_SERVER_STAGING_REPO_VALIDATE_CERTS=no
#
###[galaxy_server.published_repo]
#export ANSIBLE_GALAXY_SERVER_PUBLISHED_REPO_URL="https://ansible-galaxy.${NETWORK_INTERNAL_DOMAIN}/api/galaxy/content/published/"
#export ANSIBLE_GALAXY_SERVER_PUBLISHED_REPO_TOKEN="${ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN}"
#export ANSIBLE_GALAXY_SERVER_PUBLISHED_REPO_VALIDATE_CERTS=no
#
###[galaxy_server.rh_certified]
#export ANSIBLE_GALAXY_SERVER_RH_CERTIFIED_URL="https://ansible-galaxy.${NETWORK_INTERNAL_DOMAIN}/api/galaxy/content/rh-certified/"
#export ANSIBLE_GALAXY_SERVER_RH_CERTIFIED_TOKEN="${ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN}"
#export ANSIBLE_GALAXY_SERVER_RH_CERTIFIED_VALIDATE_CERTS=no
#
###[galaxy_server.community_repo]
#export ANSIBLE_GALAXY_SERVER_COMMUNITY_REPO_URL="https://ansible-galaxy.${NETWORK_INTERNAL_DOMAIN}/api/galaxy/content/community/"
#export ANSIBLE_GALAXY_SERVER_COMMUNITY_REPO_TOKEN="${ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN}"
#export ANSIBLE_GALAXY_SERVER_COMMUNITY_REPO_VALIDATE_CERTS=no
